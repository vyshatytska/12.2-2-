#include <iostream>
#include <string>
#include <ctime>
#include <iomanip>
#include <fstream>
using namespace std;
struct Node
{
    Node* next;
    int data;
    Node(int _data)
    {
        data = _data;
    }
    ~Node()
    {
        delete next;
    }
};
struct ForwardList
{
private:
    Node* head;
    int count;
public:
    ForwardList()
    {
        count = 0;
        head = nullptr;
    }
    Node* gethead()
    {
        return head;
    }
    void push_back(int val, Node* tmp)
    {
        if (head == nullptr)
        {
            head = new Node(val);
            head->next = nullptr;
            count++;

        }
        else
        {
            if (tmp->next != nullptr)
            {
                tmp = tmp->next;
                push_back(val, tmp);
            }
            else
            {
                tmp->next = new Node(val);
                tmp->next->next = nullptr;
                count++;
            }
        }
    }
    int size() { return count; }
    int& at(int iter, Node* tmp, int t = 0)
    {
        if (tmp != nullptr)
        {
            if (t == iter)
                return tmp->data;
            tmp = tmp->next;
            t++;
            return at(iter, tmp, t);
        }
        else
        {
            int rt = -1;
            return rt;
        }
    }
};
ForwardList create(int size, ForwardList output, int i)
{
    if (i < size)
    {
        output.push_back(rand() % 10, output.gethead());
        return create(size, output, i + 1);
    }
    else
        return output;
}
void print(ForwardList lst, int i)
{
    if (i < lst.size())
    {
        cout << lst.at(i, lst.gethead()) << "  ";
        print(lst, i + 1);
    }
    else
        cout << endl;
}
void rectask(ForwardList lst, int i, int sum)
{
    if (i < lst.size() - 1)
    {
        if (lst.at(i, lst.gethead()) < lst.at(i + 1, lst.gethead()))
        {
            cout << "The list is not sorted." << endl;
            return;
        }
        rectask(lst, i + 1, sum);
    }
    else
    {
        cout << "The lisrt is sorted" << endl;
    }
}
void main()
{
    system("color B");
    int size = 0;
    cout << "Size: "; cin >> size;
    ForwardList list; list = create(size, list, 0);
    cout << "========created list:========" << endl;
    print(list, 0);
    cout << "Task:" << endl;
    rectask(list, 0, 0);
    system("pause");
}
